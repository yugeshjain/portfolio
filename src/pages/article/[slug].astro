---
import Markdown from "@component/Markdown.astro";
import { getAllPublishedArticles } from "@facade/article";
import { getSideQuests } from "@facade/side-quest";
import Layout from "@layout/Layout.astro";
import { formatDateWithDay } from "@util/date-string";
import { getReadingTime } from "@util/reading-time";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";

interface Props {
  article: CollectionEntry<"article"> | CollectionEntry<"side-quest">;
  isArticle: boolean;
}

export async function getStaticPaths() {
  const articles = await getAllPublishedArticles();
  const sideQuests = await getSideQuests();

  const articleMap = articles.map((article) => ({
    params: { slug: article.slug },
    props: { article, isArticle: true },
  }));
  const sideQuestMap = sideQuests.map((article) => ({
    params: { slug: article.slug },
    props: { article, isArticle: false },
  }));

  return [...articleMap, ...sideQuestMap];
}

const { article, isArticle } = Astro.props;
const slug = article.slug;
const { title, image, description } = article.data;

// Capture date only from article
const date = isArticle
  ? (article as CollectionEntry<"article">).data.date
  : null;

const { Content } = await article.render();
---

<Layout
  metaData={{
    title: `${title} // Yugesh Jain`,
    description: description,
    imageUrl: image.src as ImageMetadata,
    pageUrl: `https://yugeshjain.com/article/${slug}`,
    author: "Yugesh Jain",
    publishDate: date,
    contentType: "article",
  }}
>
  <article class="article" class:list={{ "article--side-quest": !isArticle }}>
    <div class="article__cover">
      <Image
        class="article__cover__image"
        transition:name={`article_image_${slug}`}
        src={image.src as ImageMetadata}
        alt={image.alt}
      />
      <h1
        class="article__cover__title"
        transition:name={`article_title_${slug}`}
      >
        {title}
      </h1>
      <h4 class="article__cover__date">
        {date && `${formatDateWithDay(date)} â€¢ `}{getReadingTime(article.body)}
        min read
      </h4>
    </div>
    <main class="main main__article">
      <Markdown>
        <Content />
      </Markdown>
    </main>
  </article>
</Layout>

<!-- TODO: Move this to component files -->
<script>
  import { addSkeletonLoader } from "@util/image-skeleton";
  document.addEventListener("astro:page-load", () => {
    addSkeletonLoader(".markdown img", "markdown__image--loading");
  });
</script>

<style>
  /* Global Styles */
  .article {
    &__cover {
      min-height: 500px;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      padding: 0 var(--space-xs);
      &__image {
        position: absolute;
        background-repeat: no-repeat;
        background-position: center center;
        background-size: cover;
        object-fit: cover;
        width: 100%;
        height: 100%;
        z-index: 1;
        filter: grayscale(0.1);
        opacity: 0.35;
      }
      &__title {
        color: var(--grey-300);
        font-family: var(--fonts-heading);
        font-size: var(--fs-4xl);
        font-weight: 700;
        z-index: 3;
        text-align: center;
      }
      &__date {
        position: absolute;
        font-family: var(--fonts-body);
        text-transform: uppercase;
        font-size: var(--fs-sm);
        font-weight: 400;
        color: var(--grey-300);
        bottom: var(--space-s);
        z-index: 3;
      }
    }
    &--side-quest {
      & .article__cover__image {
        filter: blur(3px);
      }
    }
  }

  /* Desktop Overrides */
  @media (min-width: 769px) {
    .main__article {
      margin: 0 auto;
      display: flex;
      align-items: flex-start;
      flex-direction: column;
      padding-top: var(--space-l);
    }
  }
  /* Mobile Overrides */
  @media (max-width: 769px) {
    .main__article {
      padding-top: var(--space-l);
    }
  }
</style>
